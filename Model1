set STOPS;

param cost {d in STOPS, a in STOPS};
param demand {d in STOPS};
param cost_bus;
param cost_km;
param bus_capacity;

var bin_x {d in STOPS, a in STOPS} binary;
var flow_x {d in STOPS, a in STOPS} integer, >=0;

minimize budget:
  (sum {d in STOPS, a in STOPS} cost_km*cost[d,a]*bin_x[d,a]) + (sum {a in STOPS} cost_bus*bin_x['PARKING',a]);

s.t. same_leave_enters: (sum{a in STOPS} bin_x['PARKING',a])-(sum {d in STOPS} bin_x[d,'SCHOOL']) = 0;
s.t. fulfill_demand {x in STOPS}: (sum{d in STOPS} flow_x[d,x]) - (sum{a in STOPS} flow_x[x,a]) = demand[x];
s.t. correct_flow {d in STOPS, a in STOPS}: bus_capacity*bin_x[d,a]-flow_x[d,a] >= 0;
s.t. correct_rows {d in STOPS: d <> 'PARKING' and d <> 'SCHOOL'}: sum{a in STOPS} bin_x[d,a] = 1;
s.t. correct_cols {a in STOPS: a <> 'PARKING' and a <> 'SCHOOL'}: sum{d in STOPS} bin_x[d,a] = 1;

end;
