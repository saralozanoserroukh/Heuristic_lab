set STOPS;
set STUDENTS;

param cost {d in STOPS, a in STOPS};
param demand {d in STOPS};
param cost_bus;
param cost_km;
param bus_capacity;
param siblings{s1 in STUDENTS, s2 in STUDENTS};
param possible_stops {s in STUDENTS, d in STOPS};

var bin_x {d in STOPS, a in STOPS} binary;
var flow_x {d in STOPS, a in STOPS} integer, >=0;
var assigned_stops {s in STUDENTS, d in STOPS} binary;

minimize budget:
  (sum {d in STOPS, a in STOPS} cost_km*cost[d,a]*bin_x[d,a]) + (sum {a in STOPS} cost_bus*bin_x['PARKING',a]);

s.t. same_leave_enters: (sum{a in STOPS} bin_x['PARKING',a]) - (sum{d in STOPS} bin_x[d,'SCHOOL']) = 0;
s.t. fulfill_demand {x in STOPS: x <> 'PARKING' and x <> 'SCHOOL'}: (sum{d in STOPS} flow_x[d,x]) - (sum{a in STOPS} flow_x[x,a]) = sum{s in STUDENTS} assigned_stops[s,x];
s.t. correct_flow {d in STOPS, a in STOPS}: bus_capacity*bin_x[d,a]-flow_x[d,a] >= 0;
s.t. correct_rows {d in STOPS: d <> 'PARKING' and d <> 'SCHOOL'}: sum{a in STOPS} bin_x[d,a] = 1;
s.t. correct_cols {a in STOPS: a <> 'PARKING' and a <> 'SCHOOL'}: sum{d in STOPS} bin_x[d,a] = 1;
s.t. correct_stop {s in STUDENTS, d in STOPS}: possible_stops[s,d] - assigned_stops[s,d] >= 0;
s.t. student_has_stop {s in STUDENTS}: sum{d in STOPS} assigned_stops[s,d] = 1;
s.t. check_sibling {d in STOPS, s1 in STUDENTS, s2 in STUDENTS}: assigned_stops[s1,d]*siblings[s1,s2]-assigned_stops[s2,d]*siblings[s1,s2] = 0;

end;
